{"ast":null,"code":"var _jsxFileName = \"/Users/johncross/Desktop/10xCodeCamp/ask-a-teacher-fullstack/client/src/component/pages/Landing.js\";\nimport React from \"react\";\nimport Header from \"../ui/Header\";\nimport Footer from \"../ui/Footer\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport QuestionPreview from \"../ui/QuestionPreview\";\nimport { connect } from \"react-redux\";\nimport actions from \"../../store/actions\";\n\nclass Landing extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchInput: \"\"\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"https://raw.githubusercontent.com/john-william-cross/ask-a-teacher-mpa/master/src/mock-data/questions.json\").then(res => {\n      // handle success\n      const questions = res.data;\n      console.log(`here are the questions: `, questions); // console.log(`YOOOOOOOOOO`, actions.STORE_ALL_QUESTIONS);\n\n      this.props.dispatch({\n        type: actions.STORE_ALL_QUESTIONS,\n        payload: questions\n      });\n      this.setState({\n        displayedQuestions: questions,\n        allQuestions: questions\n      });\n    }).catch(error => {\n      // handle error\n      console.log(error);\n    });\n  }\n\n  setIsDisplayingQuestions(e) {\n    const searchInput = e.target.value;\n\n    if (searchInput.length > 0) {\n      this.setState({\n        isDisplayingQuestions: true\n      });\n    } else this.setState({\n      isDisplayingQuestions: false\n    });\n  }\n\n  setSearchInput(e) {\n    const searchInput = e.target.value; // get that value, store in searchInput\n\n    console.log(searchInput);\n    this.setState(prevState => {\n      return {\n        searchInput: searchInput,\n        //we update search input to what was entered\n        displayedQuestions: prevState.allQuestions.filter(question => {\n          //allQuestions is filtered\n          const lowerCasedInput = searchInput.toLowerCase();\n          const questionText = question.text.toLowerCase();\n          return questionText.includes(lowerCasedInput); //only questions with text that includes the searchInput.toLowerCase() is returned\n        })\n      };\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container mb-9\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 col-md-10 offset-md-1 col-lg-8 offset-lg-2 col-xl-8 offset-xl-2 mt-xs-5 mt-9\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"logo-text-font landing-page-title\",\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 22\n      }\n    }, \"Ask a teacher\"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-control mt-7\",\n      id: \"question-input-home-page\",\n      rows: \"2\",\n      autoFocus: true,\n      value: this.state.searchInput //set value of text area to empty string as declared above\n      ,\n      onChange: e => {\n        this.setSearchInput(e); //when something is entered into input, setSearchInput is run based on the text entered\n      },\n      style: {\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 22\n      }\n    }), this.state.searchInput &&\n    /*#__PURE__*/\n    //if this.state.searchInput evaluates to true (a blank string evaluates to false, so on page load this.state.searchInput is false. It is true once a char is entered), If it's true, run the second half\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-center \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"mt-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 31\n      }\n    }, \"Don't see what you're looking for?\"), /*#__PURE__*/React.createElement(Link, {\n      to: \"submit-question\",\n      className: \"submit-new-question  mt-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 31\n      }\n    }, \"Submit a new question\")), this.state.displayedQuestions && this.state.displayedQuestions.map(question => {\n      return /*#__PURE__*/React.createElement(QuestionPreview, {\n        question: question,\n        key: question.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 37\n        }\n      });\n    }), \" \")))), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }));\n  }\n\n} //mapStateToProps says take this global state and map these certain things to properties within this local state\n\n\nfunction mapStateToProps() {\n  //return whatever we want to pass from the global state into the properties\n  return {};\n}\n\nexport default connect(mapStateToProps)(Landing);","map":{"version":3,"sources":["/Users/johncross/Desktop/10xCodeCamp/ask-a-teacher-fullstack/client/src/component/pages/Landing.js"],"names":["React","Header","Footer","Link","axios","QuestionPreview","connect","actions","Landing","Component","constructor","props","state","searchInput","componentDidMount","get","then","res","questions","data","console","log","dispatch","type","STORE_ALL_QUESTIONS","payload","setState","displayedQuestions","allQuestions","catch","error","setIsDisplayingQuestions","e","target","value","length","isDisplayingQuestions","setSearchInput","prevState","filter","question","lowerCasedInput","toLowerCase","questionText","text","includes","render","textAlign","width","map","id","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Header from \"../ui/Header\";\nimport Footer from \"../ui/Footer\";\n\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport QuestionPreview from \"../ui/QuestionPreview\";\nimport { connect } from \"react-redux\";\nimport actions from \"../../store/actions\";\n\nclass Landing extends React.Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         searchInput: \"\",\n      };\n   }\n\n   componentDidMount() {\n      axios\n         .get(\n            \"https://raw.githubusercontent.com/john-william-cross/ask-a-teacher-mpa/master/src/mock-data/questions.json\"\n         )\n         .then((res) => {\n            // handle success\n            const questions = res.data;\n            console.log(`here are the questions: `, questions);\n\n            // console.log(`YOOOOOOOOOO`, actions.STORE_ALL_QUESTIONS);\n            this.props.dispatch({\n               type: actions.STORE_ALL_QUESTIONS,\n               payload: questions,\n            });\n            this.setState({\n               displayedQuestions: questions,\n               allQuestions: questions,\n            });\n         })\n         .catch((error) => {\n            // handle error\n            console.log(error);\n         });\n   }\n\n   setIsDisplayingQuestions(e) {\n      const searchInput = e.target.value;\n      if (searchInput.length > 0) {\n         this.setState({\n            isDisplayingQuestions: true,\n         });\n      } else\n         this.setState({\n            isDisplayingQuestions: false,\n         });\n   }\n\n   setSearchInput(e) {\n      const searchInput = e.target.value; // get that value, store in searchInput\n      console.log(searchInput);\n\n      this.setState((prevState) => {\n         return {\n            searchInput: searchInput, //we update search input to what was entered\n\n            displayedQuestions: prevState.allQuestions.filter((question) => {\n               //allQuestions is filtered\n               const lowerCasedInput = searchInput.toLowerCase();\n               const questionText = question.text.toLowerCase();\n\n               return questionText.includes(lowerCasedInput); //only questions with text that includes the searchInput.toLowerCase() is returned\n            }),\n         };\n      });\n   }\n\n   render() {\n      return (\n         <>\n            <Header />\n            <div className=\"container mb-9\">\n               <div className=\"row\">\n                  <div className=\"col-12 col-md-10 offset-md-1 col-lg-8 offset-lg-2 col-xl-8 offset-xl-2 mt-xs-5 mt-9\">\n                     <p\n                        className=\"logo-text-font landing-page-title\"\n                        style={{ textAlign: \"center\" }}\n                     >\n                        Ask a teacher\n                     </p>\n                     <input\n                        className=\"form-control mt-7\"\n                        id=\"question-input-home-page\"\n                        rows=\"2\"\n                        autoFocus\n                        value={this.state.searchInput} //set value of text area to empty string as declared above\n                        onChange={(e) => {\n                           this.setSearchInput(e); //when something is entered into input, setSearchInput is run based on the text entered\n                        }}\n                        style={{ width: \"100%\" }}\n                     ></input>\n\n                     {this.state.searchInput && ( //if this.state.searchInput evaluates to true (a blank string evaluates to false, so on page load this.state.searchInput is false. It is true once a char is entered), If it's true, run the second half\n                        <div>\n                           <div className=\"text-center \">\n                              <p className=\"mt-6\">\n                                 Don't see what you're looking for?\n                              </p>\n\n                              <Link\n                                 to=\"submit-question\"\n                                 className=\"submit-new-question  mt-1\"\n                              >\n                                 Submit a new question\n                              </Link>\n                           </div>\n                           {this.state.displayedQuestions &&\n                              this.state.displayedQuestions.map((question) => {\n                                 return (\n                                    <QuestionPreview\n                                       question={question}\n                                       key={question.id}\n                                    />\n                                 );\n                              })}{\" \"}\n                        </div>\n                     )}\n                  </div>\n               </div>\n            </div>\n            <Footer />\n         </>\n      );\n   }\n}\n\n//mapStateToProps says take this global state and map these certain things to properties within this local state\nfunction mapStateToProps() {\n   //return whatever we want to pass from the global state into the properties\n   return {};\n}\n\nexport default connect(mapStateToProps)(Landing);\n"]},"metadata":{},"sourceType":"module"}