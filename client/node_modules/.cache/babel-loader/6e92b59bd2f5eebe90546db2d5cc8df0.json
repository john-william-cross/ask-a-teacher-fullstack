{"ast":null,"code":"var _jsxFileName = \"/Users/johncross/Desktop/10xCodeCamp/ask-a-teacher-fullstack/client/src/component/pages/Question.js\";\nimport React from \"react\";\nimport Header from \"../ui/Header\";\nimport Footer from \"../ui/Footer\";\nimport { Link } from \"react-router-dom\";\nimport toDisplayDate from \"date-fns/format\";\nimport { checkAnswerIsOver, ANSWER_MAX_CARD_CHARS } from \"../../utils/helpers\";\nimport classnames from \"classnames\";\nimport Answer from \"../ui/Answer\";\nimport { connect } from \"react-redux\";\nimport isEmpty from \"lodash/isEmpty\";\n\nclass Question extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      answerInput: \"\"\n    };\n  } //don't need API; data is coming form the global state\n\n\n  checkAnswerIsOver() {\n    if (this.state.answerInput.length > ANSWER_MAX_CARD_CHARS || this.state.answerInput.length === 0) {\n      return true;\n    } else return false;\n  }\n\n  setAnswerInput(e) {\n    this.setState({\n      answerInput: e.target.value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, \" \", /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(React.Fragment, null, isEmpty(this.props.answerableQuestion) === false && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container mb-9\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 22\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-10 offset-md-1 col-lg-8 offset-lg-2 col-xl-8 offset-xl-2 mt-9\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lead mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 34\n      }\n    }, this.props.answerableQuestion.text)), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-muted asked-on-answers-num float-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 31\n      }\n    }, \"Asked on\", \" \", toDisplayDate(this.props.answerableQuestion.createdAt, \"MMMM d, y\"), \".\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-muted asked-on-answers-num float-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 31\n      }\n    }, this.props.answerableQuestion.answers.length, \" \", \"answers\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clearfix mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 31\n      }\n    }), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 31\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"answers\",\n      style: {\n        textAlign: \"justify\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 31\n      }\n    }, this.props.answerableQuestion.answers.map(answer => {\n      // console.log(answer);\n      return /*#__PURE__*/React.createElement(Answer, {\n        answer: answer,\n        key: answer.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 43\n        }\n      });\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \" mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 31\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clearfix mb-7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 31\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead mt-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 31\n      }\n    }, \"Your answer\"), /*#__PURE__*/React.createElement(\"textarea\", {\n      className: \"form-control form-control-lg\",\n      id: \"answer-input\",\n      rows: \"10\",\n      defaultValue: \"\",\n      onChange: e => this.setAnswerInput(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 31\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"float-right lead mt-0 text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: classnames({\n        \"text-danger\": checkAnswerIsOver(this.state.answerInput, ANSWER_MAX_CARD_CHARS)\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 34\n      }\n    }, this.state.answerInput.length, \"/\", ANSWER_MAX_CARD_CHARS)), /*#__PURE__*/React.createElement(Link, {\n      to: this.props.answerableQuestion.prevRoute,\n      className: classnames(\"mt-5 submit-answer-button logo-text-font btn btn-xm btn-outline-primary\", {\n        disabled: this.checkAnswerIsOver()\n      }),\n      id: \"submit-answer\",\n      type: \"submit\",\n      value: \"Submit answer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 31\n      }\n    }, \"Submit answer\"), /*#__PURE__*/React.createElement(Link, {\n      to: this.props.answerableQuestion.prevRoute,\n      className: classnames(\"text-muted cancel float-right\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 31\n      }\n    }, \"Cancel submission\"))))), \" \", /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 16\n      }\n    })));\n  }\n\n} // withRouter(Question);\n//mapStateToProps says take this global state and map these certain things to properties within this local state\n\n\nfunction mapStateToProps(state) {\n  return {\n    answerableQuestion: state.answerableQuestion\n  };\n}\n\nexport default connect(mapStateToProps)(Question);","map":{"version":3,"sources":["/Users/johncross/Desktop/10xCodeCamp/ask-a-teacher-fullstack/client/src/component/pages/Question.js"],"names":["React","Header","Footer","Link","toDisplayDate","checkAnswerIsOver","ANSWER_MAX_CARD_CHARS","classnames","Answer","connect","isEmpty","Question","Component","constructor","props","state","answerInput","length","setAnswerInput","e","setState","target","value","render","answerableQuestion","text","createdAt","answers","textAlign","map","answer","id","prevRoute","disabled","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Header from \"../ui/Header\";\nimport Footer from \"../ui/Footer\";\n\nimport { Link } from \"react-router-dom\";\nimport toDisplayDate from \"date-fns/format\";\nimport { checkAnswerIsOver, ANSWER_MAX_CARD_CHARS } from \"../../utils/helpers\";\nimport classnames from \"classnames\";\nimport Answer from \"../ui/Answer\";\nimport { connect } from \"react-redux\";\nimport isEmpty from \"lodash/isEmpty\";\n\nclass Question extends React.Component {\n   constructor(props) {\n      super(props);\n      this.state = { answerInput: \"\" };\n   }\n\n   //don't need API; data is coming form the global state\n\n   checkAnswerIsOver() {\n      if (\n         this.state.answerInput.length > ANSWER_MAX_CARD_CHARS ||\n         this.state.answerInput.length === 0\n      ) {\n         return true;\n      } else return false;\n   }\n\n   setAnswerInput(e) {\n      this.setState({ answerInput: e.target.value });\n   }\n\n   render() {\n      return (\n         <>\n            {\" \"}\n            <Header />\n            <>\n               {isEmpty(this.props.answerableQuestion) === false && (\n                  <div className=\"container mb-9\">\n                     <div className=\"row no-gutters\">\n                        <div className=\"col-md-10 offset-md-1 col-lg-8 offset-lg-2 col-xl-8 offset-xl-2 mt-9\">\n                           <div className=\"col-12\">\n                              <div className=\"lead mb-2\">\n                                 <Link to=\"question\">\n                                    {this.props.answerableQuestion.text}\n                                 </Link>\n                              </div>\n                              <p className=\"text-muted asked-on-answers-num float-left\">\n                                 Asked on{\" \"}\n                                 {toDisplayDate(\n                                    this.props.answerableQuestion.createdAt,\n                                    \"MMMM d, y\"\n                                 )}\n                                 .\n                              </p>\n\n                              <p className=\"text-muted asked-on-answers-num float-right\">\n                                 {this.props.answerableQuestion.answers.length}{\" \"}\n                                 answers\n                              </p>\n\n                              <div className=\"clearfix mb-4\"></div>\n                              <hr></hr>\n                              <div\n                                 className=\"answers\"\n                                 style={{ textAlign: \"justify\" }}\n                              >\n                                 {this.props.answerableQuestion.answers.map(\n                                    (answer) => {\n                                       // console.log(answer);\n                                       return (\n                                          <Answer\n                                             answer={answer}\n                                             key={answer.id}\n                                          />\n                                       );\n                                    }\n                                 )}\n                              </div>\n\n                              <div className=\" mb-4\"></div>\n\n                              <div className=\"clearfix mb-7\"></div>\n                              <p className=\"lead mt-1\">Your answer</p>\n                              <textarea\n                                 className=\"form-control form-control-lg\"\n                                 id=\"answer-input\"\n                                 rows=\"10\"\n                                 defaultValue=\"\"\n                                 onChange={(e) => this.setAnswerInput(e)}\n                              ></textarea>\n\n                              <p className=\"float-right lead mt-0 text-muted\">\n                                 <span\n                                    className={classnames({\n                                       \"text-danger\": checkAnswerIsOver(\n                                          this.state.answerInput,\n                                          ANSWER_MAX_CARD_CHARS\n                                       ),\n                                    })}\n                                 >\n                                    {this.state.answerInput.length}/\n                                    {ANSWER_MAX_CARD_CHARS}\n                                 </span>\n                              </p>\n\n                              <Link\n                                 to={this.props.answerableQuestion.prevRoute}\n                                 className={classnames(\n                                    \"mt-5 submit-answer-button logo-text-font btn btn-xm btn-outline-primary\",\n                                    { disabled: this.checkAnswerIsOver() }\n                                 )}\n                                 id=\"submit-answer\"\n                                 type=\"submit\"\n                                 value=\"Submit answer\"\n                              >\n                                 Submit answer\n                                 {/* on click,  */}\n                                 {/* TODO: ADD TAKE ME BACK/CANCEL BUTTON */}\n                              </Link>\n                              <Link\n                                 to={this.props.answerableQuestion.prevRoute}\n                                 className={classnames(\n                                    \"text-muted cancel float-right\"\n                                 )}\n                              >\n                                 Cancel submission\n                              </Link>\n                           </div>\n                        </div>\n                     </div>\n                  </div>\n               )}{\" \"}\n               <Footer />\n            </>\n         </>\n      );\n   }\n}\n\n// withRouter(Question);\n\n//mapStateToProps says take this global state and map these certain things to properties within this local state\nfunction mapStateToProps(state) {\n   return {\n      answerableQuestion: state.answerableQuestion,\n   };\n}\n\nexport default connect(mapStateToProps)(Question);\n"]},"metadata":{},"sourceType":"module"}