{"ast":null,"code":"var _jsxFileName = \"/Users/johncross/Desktop/10xCodeCamp/ask-a-teacher-fullstack/client/src/component/ui/QuestionPreview.js\";\nimport React from \"react\";\nimport toDisplayDate from \"date-fns/format\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport actions from \"../../store/actions\";\n\nfunction QuestionPreview(props) {\n  function storeAnswerableQuestion(e) {\n    const id = e.target.id;\n    console.log(`here's the id: `, id);\n    const match = props.allQuestions.find(question => {\n      return question.id === id;\n    });\n    props.dispatch({\n      type: actions.STORE_ANSWERABLE_QUESTION,\n      payload: {\n        text: match,\n        prevRoute: \"/questions\"\n      }\n    }); // get the question object with this id\n    // from the array of allQuestions, console log this object\n    // get the index of the question from allQuestions where\n    // the id is equal to the id of the question I clicked on.\n    // store the object inside the redux store /////use props.dispatch; won't need this.props.dispatch\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"lead mt-6 mb-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/question\",\n    id: props.question.id,\n    onClick: e => {\n      storeAnswerableQuestion(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, props.question.text)), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-muted asked-on-answers-num float-left mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 10\n    }\n  }, \"Asked on \", toDisplayDate(props.question.createdAt, \"MMMM d, y\"), \".\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-muted asked-on-answers-num float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 10\n    }\n  }, props.question.answers.length, \" answers\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"clearfix\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"hr\", {\n    className: \"mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"clearfix mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 10\n    }\n  }));\n}\n\nfunction mapStateToProps(state) {\n  //return whatever we want to pass from the global state into the properties\n  return {\n    answerableQuestion: state.answerableQuestion,\n    allQuestions: state.allQuestions\n  };\n}\n\nexport default connect(mapStateToProps)(QuestionPreview);","map":{"version":3,"sources":["/Users/johncross/Desktop/10xCodeCamp/ask-a-teacher-fullstack/client/src/component/ui/QuestionPreview.js"],"names":["React","toDisplayDate","Link","connect","actions","QuestionPreview","props","storeAnswerableQuestion","e","id","target","console","log","match","allQuestions","find","question","dispatch","type","STORE_ANSWERABLE_QUESTION","payload","text","prevRoute","createdAt","answers","length","mapStateToProps","state","answerableQuestion"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,qBAApB;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC7B,WAASC,uBAAT,CAAiCC,CAAjC,EAAoC;AACjC,UAAMC,EAAE,GAAGD,CAAC,CAACE,MAAF,CAASD,EAApB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAa,iBAAb,EAA+BH,EAA/B;AAEA,UAAMI,KAAK,GAAGP,KAAK,CAACQ,YAAN,CAAmBC,IAAnB,CAAyBC,QAAD,IAAc;AACjD,aAAOA,QAAQ,CAACP,EAAT,KAAgBA,EAAvB;AACF,KAFa,CAAd;AAIAH,IAAAA,KAAK,CAACW,QAAN,CAAe;AACZC,MAAAA,IAAI,EAAEd,OAAO,CAACe,yBADF;AAEZC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,IAAI,EAAER,KAAR;AAAeS,QAAAA,SAAS,EAAE;AAA1B;AAFG,KAAf,EARiC,CAajC;AACA;AACA;AACA;AAEA;AACF;;AAED,sBACG,uDACG;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,IAAD;AACG,IAAA,EAAE,EAAC,WADN;AAEG,IAAA,EAAE,EAAEhB,KAAK,CAACU,QAAN,CAAeP,EAFtB;AAGG,IAAA,OAAO,EAAGD,CAAD,IAAO;AACbD,MAAAA,uBAAuB,CAACC,CAAD,CAAvB;AACF,KALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOIF,KAAK,CAACU,QAAN,CAAeK,IAPnB,CADH,CADH,eAaG;AAAG,IAAA,SAAS,EAAC,iDAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACapB,aAAa,CAACK,KAAK,CAACU,QAAN,CAAeO,SAAhB,EAA2B,WAA3B,CAD1B,MAbH,eAgBG;AAAG,IAAA,SAAS,EAAC,6CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIjB,KAAK,CAACU,QAAN,CAAeQ,OAAf,CAAuBC,MAD3B,aAhBH,eAmBG;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBH,eAqBG;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBH,eAuBG;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBH,CADH;AA2BF;;AAED,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC7B;AACA,SAAO;AACJC,IAAAA,kBAAkB,EAAED,KAAK,CAACC,kBADtB;AAEJd,IAAAA,YAAY,EAAEa,KAAK,CAACb;AAFhB,GAAP;AAIF;;AACD,eAAeX,OAAO,CAACuB,eAAD,CAAP,CAAyBrB,eAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport toDisplayDate from \"date-fns/format\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport actions from \"../../store/actions\";\n\nfunction QuestionPreview(props) {\n   function storeAnswerableQuestion(e) {\n      const id = e.target.id;\n      console.log(`here's the id: `, id);\n\n      const match = props.allQuestions.find((question) => {\n         return question.id === id;\n      });\n\n      props.dispatch({\n         type: actions.STORE_ANSWERABLE_QUESTION,\n         payload: { text: match, prevRoute: \"/questions\" },\n      });\n\n      // get the question object with this id\n      // from the array of allQuestions, console log this object\n      // get the index of the question from allQuestions where\n      // the id is equal to the id of the question I clicked on.\n\n      // store the object inside the redux store /////use props.dispatch; won't need this.props.dispatch\n   }\n\n   return (\n      <>\n         <div className=\"lead mt-6 mb-1\">\n            <Link\n               to=\"/question\"\n               id={props.question.id}\n               onClick={(e) => {\n                  storeAnswerableQuestion(e);\n               }}\n            >\n               {props.question.text}\n            </Link>\n            {/* once clicked we want to grab the details of whatever question we clicked on and get the URL of the previous route (\"/questions\") and store it inside of redux global state (use action STORE_ANSWERABLE_QUESTION*/}\n         </div>\n         <p className=\"text-muted asked-on-answers-num float-left mb-4\">\n            Asked on {toDisplayDate(props.question.createdAt, \"MMMM d, y\")}.\n         </p>\n         <p className=\"text-muted asked-on-answers-num float-right\">\n            {props.question.answers.length} answers\n         </p>\n         <div className=\"clearfix\"></div>\n\n         <hr className=\"mt-5\" />\n\n         <div className=\"clearfix mb-4\"></div>\n      </>\n   );\n}\n\nfunction mapStateToProps(state) {\n   //return whatever we want to pass from the global state into the properties\n   return {\n      answerableQuestion: state.answerableQuestion,\n      allQuestions: state.allQuestions,\n   };\n}\nexport default connect(mapStateToProps)(QuestionPreview);\n"]},"metadata":{},"sourceType":"module"}